const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('api', {
    openLink: (url) => ipcRenderer.send('open-link', url),
    getQuestions: (subject, year) => ipcRenderer.invoke('get-questions-by-subject', subject, year),
    navigate: (page) => ipcRenderer.send('navigate', page),
    minimize: () => ipcRenderer.send("minimize-window"),
    maximize: () => ipcRenderer.send("maximize-window"),
    close: () => ipcRenderer.send("close-window"),
    closeSelectSubjectWindow: (action) => ipcRenderer.send("close-select-subject-window", action),
    onMaximized: (callback) => ipcRenderer.on("window-maximized", callback),
    onRestored: (callback) => ipcRenderer.on("window-restored", callback),
    openSelectSubjectWindow: () => ipcRenderer.send('open-subject-window'),
    sendExamResults: (summaryData) => ipcRenderer.send("send-exam-results", summaryData),
    onSecondWindowClosed: (callback) => ipcRenderer.on('second-window-closed', callback),
    openExamWindow: (examData) => ipcRenderer.send('open-exam-window', examData),
    closeExamWindow: () => ipcRenderer.send('close-exam-window'),
    openLearnCourseWindow: () => ipcRenderer.send('open-learn-course-window'),
    closeLearnCourseWindow: () => ipcRenderer.send('close-learn-course-window'),
    openQuizWindow: () => ipcRenderer.send('open-quiz-window'),
    closeQuizWindow: (lessonId) => ipcRenderer.send('close-quiz-window', lessonId),
    onLessonQuizEnded: (lessonId) => ipcRenderer.on('send-quiz-result', lessonId),
    startExam: (examData) => ipcRenderer.on('start-exam', examData),
    generatePDF: (name, courseId) => ipcRenderer.invoke('generate-certificate-pdf', name, courseId),
    onSetName: (name, courseId) => ipcRenderer.on('set-name', name, courseId),
    setFullScreen: (isFullScreen) => ipcRenderer.send('set-fullscreen', isFullScreen),
    hideControls: (isHide) => ipcRenderer.on('hide-controls', isHide),
    showControls: (isShow) => ipcRenderer.on('show-controls', isShow),
    getExamSummary: (summaryData) => ipcRenderer.on('get-exam-summary', summaryData),
    getActivationState: () => ipcRenderer.invoke('get-activation-state'),
    validateActivationOnline: (activationCode) => ipcRenderer.invoke('validate-activation-online', activationCode),
    validateActivationOffline: (activationCode, hash) => ipcRenderer.invoke('validate-activation-offline', activationCode, hash),
    openActivationWindow: () => ipcRenderer.send('open-activation-window'),
    closeActivationWindow: () => ipcRenderer.send('close-activation-window'),
    joinZoom: (url) => ipcRenderer.send('open-zoom-meeting', url),
    generateProductKey: (productKey) => ipcRenderer.invoke('generate-product-key', productKey),
    getImagePath: (subject, imageFileName) => ipcRenderer.invoke('get-image-path', subject, imageFileName),
});
